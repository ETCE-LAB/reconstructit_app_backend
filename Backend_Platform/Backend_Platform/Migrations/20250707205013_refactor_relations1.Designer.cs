// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Data;

#nullable disable

namespace Backend_Platform.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20250707205013_refactor_relations1")]
    partial class refactor_relations1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend_Platform.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAndHouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Backend_Platform.Entities.CommunityPrintRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PriceMax")
                        .HasColumnType("float");

                    b.Property<int>("PrintMaterial")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.ToTable("CommunityPrintRequests");
                });

            modelBuilder.Entity("Backend_Platform.Entities.ConstructionFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.ToTable("ConstructionFiles");
                });

            modelBuilder.Entity("Backend_Platform.Entities.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommunityPrintRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConstructionFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Backend_Platform.Entities.ItemImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemImages");
                });

            modelBuilder.Entity("Backend_Platform.Entities.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrintContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PrintContractId");

                    b.HasIndex("UserId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("Backend_Platform.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("PrintContractId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PrintContractId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Backend_Platform.Entities.PaymentAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("PaymentAttributes");
                });

            modelBuilder.Entity("Backend_Platform.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Backend_Platform.Entities.PaymentValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentAttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentAttributeId");

                    b.HasIndex("PaymentId");

                    b.ToTable("PaymentValues");
                });

            modelBuilder.Entity("Backend_Platform.Entities.PrintContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommunityPrintRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ContractStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ShippingStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CommunityPrintRequestId");

                    b.ToTable("PrintContracts");
                });

            modelBuilder.Entity("Backend_Platform.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend_Platform.Entities.Address", b =>
                {
                    b.HasOne("Backend_Platform.Entities.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("Backend_Platform.Entities.Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend_Platform.Entities.CommunityPrintRequest", b =>
                {
                    b.HasOne("Backend_Platform.Entities.Item", "Item")
                        .WithOne("CommunityPrintRequest")
                        .HasForeignKey("Backend_Platform.Entities.CommunityPrintRequest", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Backend_Platform.Entities.ConstructionFile", b =>
                {
                    b.HasOne("Backend_Platform.Entities.Item", "Item")
                        .WithOne("ConstructionFile")
                        .HasForeignKey("Backend_Platform.Entities.ConstructionFile", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Backend_Platform.Entities.Item", b =>
                {
                    b.HasOne("Backend_Platform.Entities.User", "User")
                        .WithMany("Items")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend_Platform.Entities.ItemImage", b =>
                {
                    b.HasOne("Backend_Platform.Entities.Item", "Item")
                        .WithMany("Images")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Backend_Platform.Entities.Participant", b =>
                {
                    b.HasOne("Backend_Platform.Entities.PrintContract", "PrintContract")
                        .WithMany("Participants")
                        .HasForeignKey("PrintContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Platform.Entities.User", "User")
                        .WithMany("Contracts")
                        .HasForeignKey("UserId");

                    b.Navigation("PrintContract");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend_Platform.Entities.Payment", b =>
                {
                    b.HasOne("Backend_Platform.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Platform.Entities.PrintContract", "PrintContract")
                        .WithOne("Payment")
                        .HasForeignKey("Backend_Platform.Entities.Payment", "PrintContractId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("PrintContract");
                });

            modelBuilder.Entity("Backend_Platform.Entities.PaymentAttribute", b =>
                {
                    b.HasOne("Backend_Platform.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Attributes")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Backend_Platform.Entities.PaymentValue", b =>
                {
                    b.HasOne("Backend_Platform.Entities.PaymentAttribute", "PaymentAttribute")
                        .WithMany("Values")
                        .HasForeignKey("PaymentAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Platform.Entities.Payment", "Payment")
                        .WithMany("PaymentValues")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("PaymentAttribute");
                });

            modelBuilder.Entity("Backend_Platform.Entities.PrintContract", b =>
                {
                    b.HasOne("Backend_Platform.Entities.Address", null)
                        .WithMany("PrintContracts")
                        .HasForeignKey("AddressId");

                    b.HasOne("Backend_Platform.Entities.CommunityPrintRequest", "CommunityPrintRequest")
                        .WithMany("PrintContracts")
                        .HasForeignKey("CommunityPrintRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunityPrintRequest");
                });

            modelBuilder.Entity("Backend_Platform.Entities.Address", b =>
                {
                    b.Navigation("PrintContracts");
                });

            modelBuilder.Entity("Backend_Platform.Entities.CommunityPrintRequest", b =>
                {
                    b.Navigation("PrintContracts");
                });

            modelBuilder.Entity("Backend_Platform.Entities.Item", b =>
                {
                    b.Navigation("CommunityPrintRequest");

                    b.Navigation("ConstructionFile");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Backend_Platform.Entities.Payment", b =>
                {
                    b.Navigation("PaymentValues");
                });

            modelBuilder.Entity("Backend_Platform.Entities.PaymentAttribute", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("Backend_Platform.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Backend_Platform.Entities.PrintContract", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Backend_Platform.Entities.User", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Contracts");

                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
